all[all$Country=="Reunion","Country"] <- "Réunion"
all[all$Country=="North Ireland","Country"] <- "United Kingdom"
all[all$Country=="Channel Islands","Country"] <- "United Kingdom"
all[all$Country=="Cruise Ship","Country"] <- "Others"
all[all$Country=="Venezuela","Country"] <- "Venezuela, Bolivarian Republic of"
all[all$Country=="Curacao","Country"] <- "Curaçao"
all[all$Country=="Congo (Brazzaville)","Country"] <- "Congo"
#Join ISO-Codes
ISO3        <- ISOcodes::ISO_3166_1[,c("Alpha_3","Name")]
names(ISO3) <- c("ISO3","Country")
ISO3        <- rbind(ISO3, c("RKS","Kosovo"))
#compute basic per country counts
countries        <- setNames(aggregate.data.frame(list(all$Confirmed, all$Deaths, all$Recovered), by=list(all$'Country', all$day), FUN = sum),c("Country","Day","Cases","Deaths","Recovered"))
#add iso codes for mapping
countries        <- merge(countries, ISO3, by= "Country", all=TRUE)
#clear country names
countries$Country  <- countrycode(countries$ISO3, "iso3c", "country.name")
#fill up countries with no cases
countries <- tidyr::complete(countries, nesting(Country, ISO3), Day )
countries <- countries[!is.na(countries$Day),]
#add population
countries        <- merge(countries, pop, by= "ISO3", all.x=TRUE)
library(data.table)
library(plyr)
library(ISOcodes)
library(countrycode)
library(tidyr)
library(leaflet)
library(zoo)
#download live data
download.file(url="https://github.com/CSSEGISandData/COVID-19/archive/master.zip", destfile = "COVID-19-master.zip")
#unzip downloaded data
unzip("COVID-19-master.zip")
#read poluation data
pop <- read.csv("API_SP.POP.TOTL_DS2_en_csv_v2_821007.csv", skip = 4)
pop <- setNames(pop[,c("Country.Code","X2018")],c("ISO3","pop_2018"))
#list files with datat
files <- list.files("COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports", full.names = TRUE)[!grepl("README",list.files("COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports", full.names = TRUE))]
#read data
for (day in 1:length(files)) {
daily     <- as.data.frame(data.table::fread(files[day]))
daily$day <- gsub("COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports/|.csv","",files[day])
if(day > 1) {
all <- plyr::rbind.fill(all, daily)
}else{
all <- daily
}
}
#Names
names(all)[2] <- "Country"
#Create Date
all$day <- as.Date(all$day, format = "%m-%d-%Y")
#Clean Country-Names
all[all$Country=="Russia","Country"] <- "Russian Federation"
all[all$Country=="Mainland China","Country"] <- "China"
all[all$Country=="Republic of Ireland ","Country"] <- "Ireland"
all[all$Country=="Taiwan*","Country"] <- "Taiwan"
all[all$Country=="Republic of Korea","Country"] <- "Korea, Republic of"
all[all$Country=="South Korea","Country"] <- "Korea, Republic of"
all[all$Country=="Korea, South","Country"] <- "Korea, Republic of"
all[all$Country=="Vietnam","Country"] <- "Viet Nam"
all[all$Country=="US","Country"] <- "United States"
all[all$Country=="UK","Country"] <- "United Kingdom"
all[all$Country=="Cote d'Ivoire","Country"] <- "United Kingdom"
all[all$Country=="Ivory Coast","Country"] <- "Côte d'Ivoire"
all[all$Country=="Taiwan*","Country"] <- "Taiwan, Province of China"
all[all$Country=="Taiwan","Country"] <- "Taiwan, Province of China"
all[all$Country=="Taipei and environs","Country"] <- "Taiwan, Province of China"
all[all$Country=="Iran","Country"] <- "Iran, Islamic Republic of"
all[all$Country=="Iran (Islamic Republic of)","Country"] <- "Iran, Islamic Republic of"
all[all$Country=="Czech Republic","Country"] <- "Czechia"
all[all$Country=="Macao SAR","Country"] <- "Macao"
all[all$Country=="Macau","Country"] <- "Macao"
all[all$Country=="Hong Kong SAR","Country"] <- "Hong Kong"
all[all$Country=="Congo (Kinshasa)","Country"] <- "Congo, The Democratic Republic of the"
all[all$Country=="Saint Barthelemy","Country"] <- "Saint Barthélemy"
all[all$Country=="Bolivia","Country"] <- "Bolivia, Plurinational State of"
all[all$Country=="Brunei","Country"] <- "Brunei Darussalam"
all[all$Country=="Republic of Moldova","Country"] <- "Moldova, Republic of"
all[all$Country=="Moldova","Country"] <- "Moldova, Republic of"
all[all$Country=="Vatican City","Country"] <- "Holy See (Vatican City State)"
all[all$Country=="Holy See","Country"] <- "Holy See (Vatican City State)"
all[all$Country=="Republic of Ireland","Country"] <- "Ireland"
all[all$Country=="Palestine","Country"] <- "Palestine, State of"
all[all$Country=="occupied Palestinian territory","Country"] <- "Palestine, State of"
all[all$Country=="St. Martin","Country"] <- "Saint Martin (French part)"
all[all$Country=="Saint Martin","Country"] <- "Saint Martin (French part)"
all[all$Country=="Reunion","Country"] <- "Réunion"
all[all$Country=="North Ireland","Country"] <- "United Kingdom"
all[all$Country=="Channel Islands","Country"] <- "United Kingdom"
all[all$Country=="Cruise Ship","Country"] <- "Others"
all[all$Country=="Venezuela","Country"] <- "Venezuela, Bolivarian Republic of"
all[all$Country=="Curacao","Country"] <- "Curaçao"
all[all$Country=="Congo (Brazzaville)","Country"] <- "Congo"
#Join ISO-Codes
ISO3        <- ISOcodes::ISO_3166_1[,c("Alpha_3","Name")]
names(ISO3) <- c("ISO3","Country")
#compute basic per country counts
countries        <- setNames(aggregate.data.frame(list(all$Confirmed, all$Deaths, all$Recovered), by=list(all$'Country', all$day), FUN = sum),c("Country","Day","Cases","Deaths","Recovered"))
#add iso codes for mapping
countries        <- merge(countries, ISO3, by= "Country", all=TRUE)
#clear country names
countries$Country  <- countrycode(countries$ISO3, "iso3c", "country.name")
#fill up countries with no cases
countries <- tidyr::complete(countries, nesting(Country, ISO3), Day )
countries <- countries[!is.na(countries$Day),]
#add population
countries        <- merge(countries, pop, by= "ISO3", all.x=TRUE)
#fill up NAs of Basic Variables
countries[is.na(countries$Deaths)    & !is.na(countries$Cases),"Deaths"] <- 0
countries[is.na(countries$Recovered) & !is.na(countries$Cases),"Recovered"] <- 0
#compute active cases
countries$Active <- countries$Cases - countries$Deaths - countries$Recovered
#compute ratios
countries$D2C    <- round(countries$Deaths/countries$Cases * 100,2)
countries$A2C    <- round(countries$Active/countries$Cases * 100,2)
countries$D2O    <- round(countries$Deaths/(countries$Recovered + countries$Deaths) * 100,2)
#compute per capita ratios
countries$CpC    <- round(countries$Cases/(countries$pop_2018/1000000),0)
countries$DpC    <- round(countries$Deaths/(countries$pop_2018/1000000),0)
countries$ApC    <- round(countries$Active/(countries$pop_2018/1000000),0)
countries$RpC    <- round(countries$Recovered/(countries$pop_2018/1000000),0)
#compute growth rates
countries <- countries[order(countries$Day),]
countrylist <- unique(countries$Country)
for(country in 1:length(countrylist)){
countries[which(countries$Country==countrylist[country]),"CdG"] <- as.vector(c(NA,diff(countries[which(countries$Country==countrylist[country]),"Cases"]))/lag(countries[which(countries$Country==countrylist[country]),"Cases"]))
}
#return to dataframe
countries <- as.data.frame(countries)
#produce colored bins
display_vars <- c("Cases", "Active", "Deaths", "Recovered", "D2C", "A2C", "D2O")
for(i in 1:length(display_vars)){
pal                  <- leaflet::colorBin("YlrRd", domain = countries[,display_vars[i]],bins = 7, right = TRUE)
countries[,paste0(display_vars[i],"_color")] <- pal(countries[,display_vars[i]])
}
library(data.table)
library(plyr)
library(ISOcodes)
library(countrycode)
library(tidyr)
library(leaflet)
library(zoo)
#download live data
download.file(url="https://github.com/CSSEGISandData/COVID-19/archive/master.zip", destfile = "COVID-19-master.zip")
#unzip downloaded data
unzip("COVID-19-master.zip")
#read poluation data
pop <- read.csv("API_SP.POP.TOTL_DS2_en_csv_v2_821007.csv", skip = 4)
pop <- setNames(pop[,c("Country.Code","X2018")],c("ISO3","pop_2018"))
#list files with datat
files <- list.files("COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports", full.names = TRUE)[!grepl("README",list.files("COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports", full.names = TRUE))]
#read data
for (day in 1:length(files)) {
daily     <- as.data.frame(data.table::fread(files[day]))
daily$day <- gsub("COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports/|.csv","",files[day])
if(day > 1) {
all <- plyr::rbind.fill(all, daily)
}else{
all <- daily
}
}
#Names
names(all)[2] <- "Country"
#Create Date
all$day <- as.Date(all$day, format = "%m-%d-%Y")
#Clean Country-Names
all[all$Country=="Russia","Country"] <- "Russian Federation"
all[all$Country=="Mainland China","Country"] <- "China"
all[all$Country=="Republic of Ireland ","Country"] <- "Ireland"
all[all$Country=="Taiwan*","Country"] <- "Taiwan"
all[all$Country=="Republic of Korea","Country"] <- "Korea, Republic of"
all[all$Country=="South Korea","Country"] <- "Korea, Republic of"
all[all$Country=="Korea, South","Country"] <- "Korea, Republic of"
all[all$Country=="Vietnam","Country"] <- "Viet Nam"
all[all$Country=="US","Country"] <- "United States"
all[all$Country=="UK","Country"] <- "United Kingdom"
all[all$Country=="Cote d'Ivoire","Country"] <- "United Kingdom"
all[all$Country=="Ivory Coast","Country"] <- "Côte d'Ivoire"
all[all$Country=="Taiwan*","Country"] <- "Taiwan, Province of China"
all[all$Country=="Taiwan","Country"] <- "Taiwan, Province of China"
all[all$Country=="Taipei and environs","Country"] <- "Taiwan, Province of China"
all[all$Country=="Iran","Country"] <- "Iran, Islamic Republic of"
all[all$Country=="Iran (Islamic Republic of)","Country"] <- "Iran, Islamic Republic of"
all[all$Country=="Czech Republic","Country"] <- "Czechia"
all[all$Country=="Macao SAR","Country"] <- "Macao"
all[all$Country=="Macau","Country"] <- "Macao"
all[all$Country=="Hong Kong SAR","Country"] <- "Hong Kong"
all[all$Country=="Congo (Kinshasa)","Country"] <- "Congo, The Democratic Republic of the"
all[all$Country=="Saint Barthelemy","Country"] <- "Saint Barthélemy"
all[all$Country=="Bolivia","Country"] <- "Bolivia, Plurinational State of"
all[all$Country=="Brunei","Country"] <- "Brunei Darussalam"
all[all$Country=="Republic of Moldova","Country"] <- "Moldova, Republic of"
all[all$Country=="Moldova","Country"] <- "Moldova, Republic of"
all[all$Country=="Vatican City","Country"] <- "Holy See (Vatican City State)"
all[all$Country=="Holy See","Country"] <- "Holy See (Vatican City State)"
all[all$Country=="Republic of Ireland","Country"] <- "Ireland"
all[all$Country=="Palestine","Country"] <- "Palestine, State of"
all[all$Country=="occupied Palestinian territory","Country"] <- "Palestine, State of"
all[all$Country=="St. Martin","Country"] <- "Saint Martin (French part)"
all[all$Country=="Saint Martin","Country"] <- "Saint Martin (French part)"
all[all$Country=="Reunion","Country"] <- "Réunion"
all[all$Country=="North Ireland","Country"] <- "United Kingdom"
all[all$Country=="Channel Islands","Country"] <- "United Kingdom"
all[all$Country=="Cruise Ship","Country"] <- "Others"
all[all$Country=="Venezuela","Country"] <- "Venezuela, Bolivarian Republic of"
all[all$Country=="Curacao","Country"] <- "Curaçao"
all[all$Country=="Congo (Brazzaville)","Country"] <- "Congo"
#Join ISO-Codes
ISO3        <- ISOcodes::ISO_3166_1[,c("Alpha_3","Name")]
names(ISO3) <- c("ISO3","Country")
#compute basic per country counts
countries        <- setNames(aggregate.data.frame(list(all$Confirmed, all$Deaths, all$Recovered), by=list(all$'Country', all$day), FUN = sum),c("Country","Day","Cases","Deaths","Recovered"))
#add iso codes for mapping
countries        <- merge(countries, ISO3, by= "Country", all=TRUE)
#clear country names
countries$Country  <- countrycode(countries$ISO3, "iso3c", "country.name")
#fill up countries with no cases
countries <- tidyr::complete(countries, nesting(Country, ISO3), Day )
countries <- countries[!is.na(countries$Day),]
#add population
countries        <- merge(countries, pop, by= "ISO3", all.x=TRUE)
#fill up NAs of Basic Variables
countries[is.na(countries$Deaths)    & !is.na(countries$Cases),"Deaths"] <- 0
countries[is.na(countries$Recovered) & !is.na(countries$Cases),"Recovered"] <- 0
#compute active cases
countries$Active <- countries$Cases - countries$Deaths - countries$Recovered
#compute ratios
countries$D2C    <- round(countries$Deaths/countries$Cases * 100,2)
countries$A2C    <- round(countries$Active/countries$Cases * 100,2)
countries$D2O    <- round(countries$Deaths/(countries$Recovered + countries$Deaths) * 100,2)
#compute per capita ratios
countries$CpC    <- round(countries$Cases/(countries$pop_2018/1000000),0)
countries$DpC    <- round(countries$Deaths/(countries$pop_2018/1000000),0)
countries$ApC    <- round(countries$Active/(countries$pop_2018/1000000),0)
countries$RpC    <- round(countries$Recovered/(countries$pop_2018/1000000),0)
#compute growth rates
countries <- countries[order(countries$Day),]
countrylist <- unique(countries$Country)
for(country in 1:length(countrylist)){
countries[which(countries$Country==countrylist[country]),"CdG"] <- as.vector(c(NA,diff(countries[which(countries$Country==countrylist[country]),"Cases"]))/lag(countries[which(countries$Country==countrylist[country]),"Cases"]))
}
#return to dataframe
countries <- as.data.frame(countries)
display_vars <- c("Cases", "Active", "Deaths", "Recovered", "D2C", "A2C", "D2O")
i <- 1
pal                  <- leaflet::colorBin("YlrRd", domain = countries[,display_vars[i]],bins = 7, right = TRUE)
View(pal)
countries[,paste0(display_vars[i],"_color")] <- pal(countries[,display_vars[i]])
pal                  <- leaflet::colorBin("YlrRd", domain = countries[,display_vars[i]],bins = 7)
countries[,paste0(display_vars[i],"_color")] <- pal(countries[,display_vars[i]])
pal                  <- leaflet::colorBin("YlrRd", domain = countries[,display_vars[i]],bins = 4)
countries[,paste0(display_vars[i],"_color")] <- pal(countries[,display_vars[i]])
library(shiny); runApp('Display.R')
pal                  <- leaflet::colorBin("YlrRd", domain = countries[,display_vars[i]],bins = 4)
countries[,paste0(display_vars[i],"_color")] <- pal(countries[,display_vars[i]])
countries[,display_vars[i]]
i <- 4
pal                  <- leaflet::colorBin("YlrRd", domain = countries[,display_vars[i]],bins = 4)
countries[,paste0(display_vars[i],"_color")] <- pal(countries[,display_vars[i]])
library(data.table)
library(data.table)
library(plyr)
library(ISOcodes)
library(countrycode)
library(tidyr)
library(leaflet)
library(zoo)
pal                  <- leaflet::colorBin("YlrRd", domain = 1:5 ,bins = 4)
countries[,paste0(display_vars[i],"_color")] <- pal(countries[,display_vars[i]])
str(countries)
pal                  <- leaflet::colorBin(palette = "YlrRd",bins = 7, domain = countries[,display_vars[i]])
countries[,paste0(display_vars[i],"_color")] <- pal(countries[,display_vars[i]])
pal                  <- leaflet::colorBin(palette = "YlrRd",bins = 7, domain = countries[,"Cases"])
pal(countries[,"Cases]")
pal(countries[,"Cases"])
pal                  <- leaflet::colorBin(palette = "Dark2",bins = 7, domain = countries[,"Cases"])
pal(countries[,"Cases"])
pal                  <- leaflet::colorBin(palette = "Dark2",bins = 7, domain = countries[,display_vars[i]])
countries[,paste0(display_vars[i],"_color")] <- pal(countries[,display_vars[i]])
for(i in 1:length(display_vars)){
pal                  <- leaflet::colorBin(palette = "RdYlGn",bins = 10, domain = countries[,display_vars[i]])
countries[,paste0(display_vars[i],"_color")] <- pal(countries[,display_vars[i]])
}
for(country in 1:length(countrylist)){
countries[which(countries$Country==countrylist[country]),"CdG"] <- round(as.vector(c(NA,diff(countries[which(countries$Country==countrylist[country]),"Cases"]))/lag(countries[which(countries$Country==countrylist[country]),"Cases"])),4)*100
countries[which(countries$Country==countrylist[country]),"DdG"] <- round(as.vector(c(NA,diff(countries[which(countries$Country==countrylist[country]),"Deaths"]))/lag(countries[which(countries$Country==countrylist[country]),"Deaths"])),4)*100
}
library(data.table)
library(plyr)
library(ISOcodes)
library(countrycode)
library(tidyr)
library(leaflet)
library(zoo)
#download live data
download.file(url="https://github.com/CSSEGISandData/COVID-19/archive/master.zip", destfile = "COVID-19-master.zip")
#unzip downloaded data
unzip("COVID-19-master.zip")
#read poluation data
pop <- read.csv("API_SP.POP.TOTL_DS2_en_csv_v2_821007.csv", skip = 4)
pop <- setNames(pop[,c("Country.Code","X2018")],c("ISO3","pop_2018"))
#list files with datat
files <- list.files("COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports", full.names = TRUE)[!grepl("README",list.files("COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports", full.names = TRUE))]
#read data
for (day in 1:length(files)) {
daily     <- as.data.frame(data.table::fread(files[day]))
daily$day <- gsub("COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports/|.csv","",files[day])
if(day > 1) {
all <- plyr::rbind.fill(all, daily)
}else{
all <- daily
}
}
#Names
names(all)[2] <- "Country"
#Create Date
all$day <- as.Date(all$day, format = "%m-%d-%Y")
#Clean Country-Names
all[all$Country=="Russia","Country"] <- "Russian Federation"
all[all$Country=="Mainland China","Country"] <- "China"
all[all$Country=="Republic of Ireland ","Country"] <- "Ireland"
all[all$Country=="Taiwan*","Country"] <- "Taiwan"
all[all$Country=="Republic of Korea","Country"] <- "Korea, Republic of"
all[all$Country=="South Korea","Country"] <- "Korea, Republic of"
all[all$Country=="Korea, South","Country"] <- "Korea, Republic of"
all[all$Country=="Vietnam","Country"] <- "Viet Nam"
all[all$Country=="US","Country"] <- "United States"
all[all$Country=="UK","Country"] <- "United Kingdom"
all[all$Country=="Cote d'Ivoire","Country"] <- "United Kingdom"
all[all$Country=="Ivory Coast","Country"] <- "Côte d'Ivoire"
all[all$Country=="Taiwan*","Country"] <- "Taiwan, Province of China"
all[all$Country=="Taiwan","Country"] <- "Taiwan, Province of China"
all[all$Country=="Taipei and environs","Country"] <- "Taiwan, Province of China"
all[all$Country=="Iran","Country"] <- "Iran, Islamic Republic of"
all[all$Country=="Iran (Islamic Republic of)","Country"] <- "Iran, Islamic Republic of"
all[all$Country=="Czech Republic","Country"] <- "Czechia"
all[all$Country=="Macao SAR","Country"] <- "Macao"
all[all$Country=="Macau","Country"] <- "Macao"
all[all$Country=="Hong Kong SAR","Country"] <- "Hong Kong"
all[all$Country=="Congo (Kinshasa)","Country"] <- "Congo, The Democratic Republic of the"
all[all$Country=="Saint Barthelemy","Country"] <- "Saint Barthélemy"
all[all$Country=="Bolivia","Country"] <- "Bolivia, Plurinational State of"
all[all$Country=="Brunei","Country"] <- "Brunei Darussalam"
all[all$Country=="Republic of Moldova","Country"] <- "Moldova, Republic of"
all[all$Country=="Moldova","Country"] <- "Moldova, Republic of"
all[all$Country=="Vatican City","Country"] <- "Holy See (Vatican City State)"
all[all$Country=="Holy See","Country"] <- "Holy See (Vatican City State)"
all[all$Country=="Republic of Ireland","Country"] <- "Ireland"
all[all$Country=="Palestine","Country"] <- "Palestine, State of"
all[all$Country=="occupied Palestinian territory","Country"] <- "Palestine, State of"
all[all$Country=="St. Martin","Country"] <- "Saint Martin (French part)"
all[all$Country=="Saint Martin","Country"] <- "Saint Martin (French part)"
all[all$Country=="Reunion","Country"] <- "Réunion"
all[all$Country=="North Ireland","Country"] <- "United Kingdom"
all[all$Country=="Channel Islands","Country"] <- "United Kingdom"
all[all$Country=="Cruise Ship","Country"] <- "Others"
all[all$Country=="Venezuela","Country"] <- "Venezuela, Bolivarian Republic of"
all[all$Country=="Curacao","Country"] <- "Curaçao"
all[all$Country=="Congo (Brazzaville)","Country"] <- "Congo"
#Join ISO-Codes
ISO3        <- ISOcodes::ISO_3166_1[,c("Alpha_3","Name")]
names(ISO3) <- c("ISO3","Country")
#compute basic per country counts
countries        <- setNames(aggregate.data.frame(list(all$Confirmed, all$Deaths, all$Recovered), by=list(all$'Country', all$day), FUN = sum),c("Country","Day","Cases","Deaths","Recovered"))
#add iso codes for mapping
countries        <- merge(countries, ISO3, by= "Country", all=TRUE)
#clear country names
countries$Country  <- countrycode(countries$ISO3, "iso3c", "country.name")
#fill up countries with no cases
countries <- tidyr::complete(countries, nesting(Country, ISO3), Day )
countries <- countries[!is.na(countries$Day),]
#add population
countries        <- merge(countries, pop, by= "ISO3", all.x=TRUE)
#fill up NAs of Basic Variables
countries[is.na(countries$Deaths)    & !is.na(countries$Cases),"Deaths"] <- 0
countries[is.na(countries$Recovered) & !is.na(countries$Cases),"Recovered"] <- 0
#compute active cases
countries$Active <- countries$Cases - countries$Deaths - countries$Recovered
#compute ratios
countries$D2C    <- round(countries$Deaths/countries$Cases * 100,2)
countries$A2C    <- round(countries$Active/countries$Cases * 100,2)
countries$D2O    <- round(countries$Deaths/(countries$Recovered + countries$Deaths) * 100,2)
#compute per capita ratios
countries$CpC    <- round(countries$Cases/(countries$pop_2018/1000000),0)
countries$DpC    <- round(countries$Deaths/(countries$pop_2018/1000000),0)
countries$ApC    <- round(countries$Active/(countries$pop_2018/1000000),0)
countries$RpC    <- round(countries$Recovered/(countries$pop_2018/1000000),0)
#compute growth rates
countries <- countries[order(countries$Day),]
countrylist <- unique(countries$Country)
for(country in 1:length(countrylist)){
countries[which(countries$Country==countrylist[country]),"CdG"] <- round(as.vector(c(NA,diff(countries[which(countries$Country==countrylist[country]),"Cases"]))/lag(countries[which(countries$Country==countrylist[country]),"Cases"])),4)*100
countries[which(countries$Country==countrylist[country]),"DdG"] <- round(as.vector(c(NA,diff(countries[which(countries$Country==countrylist[country]),"Deaths"]))/lag(countries[which(countries$Country==countrylist[country]),"Deaths"])),4)*100
}
#return to dataframe
countries <- as.data.frame(countries)
#produce colored bins
display_vars <- c("Cases", "Active", "Deaths", "Recovered", "D2C", "A2C", "D2O", "CpC","DpC","ApC","RpC","CdG","DdG")
for(i in 1:length(display_vars)){
pal                  <- leaflet::colorBin(palette = "RdYlGn",bins = 10, domain = countries[,display_vars[i]])
countries[,paste0(display_vars[i],"_color")] <- pal(countries[,display_vars[i]])
}
runApp('Display.R')
#read poluation data
pop <- read.csv("API_SP.POP.TOTL_DS2_en_csv_v2_821007.csv", skip = 4)
pop <- setNames(pop[,c("Country.Code","X2018")],c("ISO3","pop_2018"))
#list files with datat
files <- list.files("COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports", full.names = TRUE)[!grepl("README",list.files("COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports", full.names = TRUE))]
#read data
for (day in 1:length(files)) {
daily     <- as.data.frame(data.table::fread(files[day]))
daily$day <- gsub("COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports/|.csv","",files[day])
if(day > 1) {
all <- plyr::rbind.fill(all, daily)
}else{
all <- daily
}
}
#Names
names(all)[2] <- "Country"
#Create Date
all$day <- as.Date(all$day, format = "%m-%d-%Y")
#Clean Country-Names
all[all$Country=="Russia","Country"] <- "Russian Federation"
all[all$Country=="Mainland China","Country"] <- "China"
all[all$Country=="Republic of Ireland ","Country"] <- "Ireland"
all[all$Country=="Taiwan*","Country"] <- "Taiwan"
all[all$Country=="Republic of Korea","Country"] <- "Korea, Republic of"
all[all$Country=="South Korea","Country"] <- "Korea, Republic of"
all[all$Country=="Korea, South","Country"] <- "Korea, Republic of"
all[all$Country=="Vietnam","Country"] <- "Viet Nam"
all[all$Country=="US","Country"] <- "United States"
all[all$Country=="UK","Country"] <- "United Kingdom"
all[all$Country=="Cote d'Ivoire","Country"] <- "United Kingdom"
all[all$Country=="Ivory Coast","Country"] <- "Côte d'Ivoire"
all[all$Country=="Taiwan*","Country"] <- "Taiwan, Province of China"
all[all$Country=="Taiwan","Country"] <- "Taiwan, Province of China"
all[all$Country=="Taipei and environs","Country"] <- "Taiwan, Province of China"
all[all$Country=="Iran","Country"] <- "Iran, Islamic Republic of"
all[all$Country=="Iran (Islamic Republic of)","Country"] <- "Iran, Islamic Republic of"
all[all$Country=="Czech Republic","Country"] <- "Czechia"
all[all$Country=="Macao SAR","Country"] <- "Macao"
all[all$Country=="Macau","Country"] <- "Macao"
all[all$Country=="Hong Kong SAR","Country"] <- "Hong Kong"
all[all$Country=="Congo (Kinshasa)","Country"] <- "Congo, The Democratic Republic of the"
all[all$Country=="Saint Barthelemy","Country"] <- "Saint Barthélemy"
all[all$Country=="Bolivia","Country"] <- "Bolivia, Plurinational State of"
all[all$Country=="Brunei","Country"] <- "Brunei Darussalam"
all[all$Country=="Republic of Moldova","Country"] <- "Moldova, Republic of"
all[all$Country=="Moldova","Country"] <- "Moldova, Republic of"
all[all$Country=="Vatican City","Country"] <- "Holy See (Vatican City State)"
all[all$Country=="Holy See","Country"] <- "Holy See (Vatican City State)"
all[all$Country=="Republic of Ireland","Country"] <- "Ireland"
all[all$Country=="Palestine","Country"] <- "Palestine, State of"
all[all$Country=="occupied Palestinian territory","Country"] <- "Palestine, State of"
all[all$Country=="St. Martin","Country"] <- "Saint Martin (French part)"
all[all$Country=="Saint Martin","Country"] <- "Saint Martin (French part)"
all[all$Country=="Reunion","Country"] <- "Réunion"
all[all$Country=="North Ireland","Country"] <- "United Kingdom"
all[all$Country=="Channel Islands","Country"] <- "United Kingdom"
all[all$Country=="Cruise Ship","Country"] <- "Others"
all[all$Country=="Venezuela","Country"] <- "Venezuela, Bolivarian Republic of"
all[all$Country=="Curacao","Country"] <- "Curaçao"
all[all$Country=="Congo (Brazzaville)","Country"] <- "Congo"
#Join ISO-Codes
ISO3        <- ISOcodes::ISO_3166_1[,c("Alpha_3","Name")]
names(ISO3) <- c("ISO3","Country")
#compute basic per country counts
countries        <- setNames(aggregate.data.frame(list(all$Confirmed, all$Deaths, all$Recovered), by=list(all$'Country', all$day), FUN = sum),c("Country","Day","Cases","Deaths","Recovered"))
#add iso codes for mapping
countries        <- merge(countries, ISO3, by= "Country", all=TRUE)
#clear country names
countries$Country  <- countrycode(countries$ISO3, "iso3c", "country.name")
#fill up countries with no cases
countries <- tidyr::complete(countries, nesting(Country, ISO3), Day )
countries <- countries[!is.na(countries$Day),]
#add population
countries        <- merge(countries, pop, by= "ISO3", all.x=TRUE)
#fill up NAs of Basic Variables
countries[is.na(countries$Deaths)    & !is.na(countries$Cases),"Deaths"] <- 0
countries[is.na(countries$Recovered) & !is.na(countries$Cases),"Recovered"] <- 0
#compute active cases
countries$Active <- countries$Cases - countries$Deaths - countries$Recovered
#compute ratios
countries$D2C    <- round(countries$Deaths/countries$Cases * 100,2)
countries$A2C    <- round(countries$Active/countries$Cases * 100,2)
countries$D2O    <- round(countries$Deaths/(countries$Recovered + countries$Deaths) * 100,2)
#compute per capita ratios
countries$CpC    <- round(countries$Cases/(countries$pop_2018/1000000),0)
countries$DpC    <- round(countries$Deaths/(countries$pop_2018/1000000),0)
countries$ApC    <- round(countries$Active/(countries$pop_2018/1000000),0)
countries$RpC    <- round(countries$Recovered/(countries$pop_2018/1000000),0)
#compute growth rates
countries <- countries[order(countries$Day),]
countrylist <- unique(countries$Country)
for(country in 1:length(countrylist)){
countries[which(countries$Country==countrylist[country]),"CdG"] <- round(as.vector(c(NA,diff(countries[which(countries$Country==countrylist[country]),"Cases"]))/lag(countries[which(countries$Country==countrylist[country]),"Cases"])),4)*100
countries[which(countries$Country==countrylist[country]),"DdG"] <- round(as.vector(c(NA,diff(countries[which(countries$Country==countrylist[country]),"Deaths"]))/lag(countries[which(countries$Country==countrylist[country]),"Deaths"])),4)*100
}
#return to dataframe
countries <- as.data.frame(countries)
#produce colored bins
display_vars <- c("Cases", "Active", "Deaths", "Recovered", "D2C", "A2C", "D2O", "CpC","DpC","ApC","RpC","CdG","DdG")
for(i in 1:length(display_vars)){
pal                  <- leaflet::colorBin(palette = "RdYlGn",bins = 10, domain = countries[,display_vars[i]], reverse = TRUE)
countries[,paste0(display_vars[i],"_color")] <- pal(countries[,display_vars[i]])
}
runApp('Display.R')
runApp('Display.R')
runApp('Display.R')
runApp('Display.R')
